//------------------------------------------------------------------------------
// VisualStudio Project Generation
//------------------------------------------------------------------------------
.ProjectCommon =
[
  .ProjectBuildCommand      = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -monitor -cache -nosummaryonerror -fastcancel ^$(ProjectName)-^$(Platform)-^$(Configuration)'
  .ProjectRebuildCommand    = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -monitor -cache -clean -nosummaryonerror -fastcancel ^$(ProjectName)-^$(Platform)-^$(Configuration)'
  .OutputDirectory          = '^$(SolutionDir)/bin/^$(Platform)-^$(Configuration)/^$(ProjectName)'
  .IntermediateDirectory    = '^$(SolutionDir)/bin/^$(Platform)-^$(Configuration)/^$(ProjectName)'
  .Platform                 = 'x64'
  .PlatformToolset          = 'v141'
  .IncludeSearchPath        = '^$(SolutionDir);./;$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/um;'
                            + '$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/shared;'
                            + '$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/ucrt;'
                            + '$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/winrt;'
                            + '$externalIncludesVisualStudio$'

  .X64Defines               = 'WIN32_LEAN_AND_MEAN;_WIN32;__WINDOWS__;NOMINMAX;WIN64;_CONSOLE;_CRT_SECURE_NO_WARNINGS;_WINSOCK_DEPRECATED_NO_WARNINGS;__cplusplus;_UNICODE;UNICODE;'
							              + 'FAZE_PLATFORM_WINDOWS;'
                            + '$extVisualStudioDefines$'
  .DebugDefines             = 'DEBUG;PROFILING_ENABLED;_DEBUG'
  .ProfileDefines           = 'RELEASE;PROFILING_ENABLED'
  .ReleaseDefines           = 'RELEASE'
  .AdditionalOptions        = '/W4 /std:c++latest'
]
// not everything needs graphics targets
.ProjectX64Debug      = [ Using( .ProjectCommon ) .Config = 'Debug'   .PreprocessorDefinitions = .X64Defines + .DebugDefines ]
.ProjectX64Profile    = [ Using( .ProjectCommon ) .Config = 'Profile' .PreprocessorDefinitions = .X64Defines + .ProfileDefines ]
.ProjectX64Release    = [ Using( .ProjectCommon ) .Config = 'Release' .PreprocessorDefinitions = .X64Defines + .ReleaseDefines ]

.ProjectConfigs2 = {.ProjectX64Debug, .ProjectX64Profile, .ProjectX64Release}

VCXProject( '$ProjectName$-proj' )
{
.ProjectOutput        = '$ProjectPath$/$ProjectName$.vcxproj'
.ProjectInputPaths    = '$ProjectPath$/'
.ProjectBasePath      = '$ProjectPath$/'
.ProjectConfigs       = .ProjectConfigs2
}

// Unity
//--------------------------------------------------------------------------
{
	// Common options
	.UnityInputPath     = '$ProjectPath$/'
	.UnityOutputPath    = '$OutputBase$/Unity/$ProjectPath$/'
	.UnityOutputPattern	= 'Unity_$ProjectName$.cpp'

	// Windows
	Unity( '$ProjectName$-Unity-Windows' )
	{

	}
	// Windows
	Unity( '$ProjectName$-Unity-Linux' )
	{

	}
}

// Windows (MSVC)
//--------------------------------------------------------------------------
ForEach( .Config in .Configs_Windows_MSVC )
{
  Using( .Config )
  .OutputBase + '/$Platform$-$Config$'

    .PCHOptions         = .BaseCompilerOptions
                        + .BaseDefinitions
                        + '$extDefines$'
                        + ' /Fp"%2" /Fo"%3"'
                        + .BaseIncludePaths
                        + .externalIncludes

    .CompilerOptions    = .BaseCompilerOptions
                        + .BaseDefinitions
                        + '$extDefines$' 
                        + ' /Fo"%2"'
                        + .BaseIncludePaths
                        + .externalIncludes

  // Static Library
  Library( '$ProjectName$-Lib-$Platform$-$Config$' )
  {
    // Unity build
    .CompilerInputUnity     = '$ProjectName$-Unity-Windows'
    // Normal build
    //.CompilerInputPath  = '$ProjectPath$/'

    // Output
    .CompilerOutputPath     = '$OutputBase$/$ProjectName$/'
    .LibrarianOutput      = '$OutputBase$/$ProjectName$/$ProjectName$.lib'
  }
  Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Lib-$Platform$-$Config$' }
}

// Limux
ForEach( .Config in .Configs_Linux )
{
Using( .Config )
.OutputBase + '/$Platform$-$Config$'

// Static Library
Library( '$ProjectName$-Lib-$Platform$-$Config$' )
{
  .CompilerInputUnity     = '$ProjectName$-Unity-Linux'
  .CompilerOutputPath     = '$OutputBase$/$ProjectName$/'
  .LibrarianOutput      = '$OutputBase$/$ProjectName$/$ProjectName$.a'
}
Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Lib-$Platform$-$Config$' }
}

// Aliases
//--------------------------------------------------------------------------
// Per-Config
Alias( '$ProjectName$-Debug' )    { .Targets = { '$ProjectName$-X64-Debug' } }
Alias( '$ProjectName$-Profile' )  { .Targets = { '$ProjectName$-X64-Profile' } }
Alias( '$ProjectName$-Release' )  { .Targets = { '$ProjectName$-X64-Release' } }

// Per-Platform
Alias( '$ProjectName$-X64' )    { .Targets = { '$ProjectName$-X64-Debug', '$ProjectName$-X64-Release', '$ProjectName$-X64-Profile' } }
Alias( '$ProjectName$-X64Linux' )    { .Targets = { '$ProjectName$-X64Linux-Debug', '$ProjectName$-X64Linux-Release', '$ProjectName$-X64Linux-Profile' } }

// All
Alias( '$ProjectName$' )
{
.Targets = { '$ProjectName$-Debug', '$ProjectName$-Profile', '$ProjectName$-Release' }
}