// FBuildApp
//------------------------------------------------------------------------------
{
  .ProjectName  = 'App'
  .ProjectPath  = 'app'

  // Visual Studio Project Generation
  //--------------------------------------------------------------------------



  VCXProject( '$ProjectName$-proj' )
  {
    .ProjectOutput          = '$ProjectPath$\$ProjectName$.vcxproj'
    .ProjectInputPaths      = '$ProjectPath$\'
    .ProjectBasePath        = '$ProjectPath$\'
    .OutputDirectory        = '^$(SolutionDir)\bin\^$(Platform)-^$(Configuration)\^$(ProjectName)'
    .LocalDebuggerCommand   = '^$(SolutionDir)\bin\^$(Platform)-^$(Configuration)\^$(ProjectName)\^$(ProjectName).exe'
    .LocalDebuggerWorkingDirectory = '^$(SolutionDir)\appspace\'
    .ProjectConfigs         = .ProjectGfxConfigs
  }

  // Unity
  //--------------------------------------------------------------------------
  ForEach( .gfxApi in .GraphicsBackends)
  {
    Using( .gfxApi )
    {
      // Common options
      .UnityInputPath             = '$ProjectPath$\'
      .UnityOutputPath            = '$OutputBase$\Unity\$ProjectPath$-$GraphicsApi$\'

      // Windows
      Unity( '$ProjectName$-$GraphicsApi$-Unity-Windows' )
      {
      }
      // Linux
      Unity( '$ProjectName$-$GraphicsApi$-Unity-Linux' )
      {
      }
    }
  }
  // Windows specials
  .CommonLinkerLibs   = ' /SUBSYSTEM:WINDOWS'
                      + ' libcmt.lib'
                      + ' kernel32.lib'
                      + ' user32.lib'
                      + ' gdi32.lib'
                      + ' winspool.lib'
                      + ' comdlg32.lib'
                      + ' advapi32.lib'
                      + ' shell32.lib'
                      + ' ole32.lib'
                      + ' oleaut32.lib'
                      + ' uuid.lib'
                      + ' odbc32.lib'
                      + ' odbccp32.lib'
                      + ' libconcrt1.lib'
                      + ' OLDNAMES.lib'
                      + ' D3d12.lib'
                      + ' Dxgi.lib'
                      + ' atls.lib'
                      + ' D3DCompiler.lib'
  .Debuglinkerlibs    = ' libcpmtd.lib' // brings thread support
                      + ' libucrtd.lib'
                      + ' libvcruntimed.lib'
                      + .extDebLibs
  .Releaselinkerlibs  = ' libcpmt.lib'
                      + ' libucrt.lib'
                      + ' libvcruntime.lib'
                      + .extRelLibs
  .Profilelinkerlibs  = .Releaselinkerlibs

  .X64DebugConfiguration =
  [
    Using (.X64DebugConfig)
    .LinkerOptions  + .CommonLinkerLibs
                    + .Debuglinkerlibs
  ]

  .X64ProfileConfiguration =
  [
    Using (.X64ProfileConfig)
    .LinkerOptions  + .CommonLinkerLibs
                    + .Profilelinkerlibs
  ]

  .X64ReleaseConfiguration =
  [
    Using (.X64ReleaseConfig)
    .LinkerOptions  + .CommonLinkerLibs
                    + .Releaselinkerlibs
  ]


  .Configs_Windows_MSVC2 = { .X64DebugConfiguration, .X64ProfileConfiguration, .X64ReleaseConfiguration }


// linux
  .LinuxCommonLinkerLibs   = ' '
  .LinuxDebuglinkerlibs    = ' ' // brings thread support
                           + .extDebLibs
  .LinuxReleaselinkerlibs  = ' '
                           + .extRelLibs
  .LinuxProfilelinkerlibs  = .LinuxReleaselinkerlibs

  .X64LinuxDebugConfiguration =
  [
    Using (.X64LinuxDebugConfig)
    .LinkerOptions  + .LinuxCommonLinkerLibs
                    + .LinuxDebuglinkerlibs
  ]

  .X64LinuxProfileConfiguration =
  [
    Using (.X64LinuxProfileConfig)
    .LinkerOptions  + .LinuxCommonLinkerLibs
                    + .LinuxProfilelinkerlibs
  ]

  .X64LinuxReleaseConfiguration =
  [
    Using (.X64LinuxReleaseConfig)
    .LinkerOptions  + .LinuxCommonLinkerLibs
                    + .LinuxReleaselinkerlibs
  ]


  .Configs_Windows_MSVC2 = { .X64DebugConfiguration, .X64ProfileConfiguration, .X64ReleaseConfiguration }
  .Configs_Linux = { .X64LinuxDebugConfiguration, .X64LinuxProfileConfiguration, .X64LinuxReleaseConfiguration }

  // Windows (MSVC)
  //--------------------------------------------------------------------------
  ForEach( .gfxApi in .GraphicsBackends)
  {
    Using( .gfxApi )
    ForEach( .Config in .Configs_Windows_MSVC2 )
    {
      Using( .Config )

      .CompilerOptions    + .gfxDefines
      .PCHOptions         + .gfxDefines

      .OutputBase + '\$Platform$-$GraphicsApi$-$Config$'
      //Print('$LinkerOptions$')
      //Print('$BaseIncludePaths$')
      // Static Library
      Library( '$ProjectName$-Lib-$Platform$-$GraphicsApi$-$Config$' )
      {
        // Input (Unity)
        .CompilerInputUnity   = '$ProjectName$-$GraphicsApi$-Unity-Windows'

          // Output
        .CompilerOutputPath   = '$OutputBase$\$ProjectName$\'
        .LibrarianOutput      = '$OutputBase$\$ProjectName$\$ProjectName$.lib'
      }

      // Executable
      Executable( '$ProjectName$-Exe-$Platform$-$GraphicsApi$-$Config$' )
      {
        .Libraries = {
          '$ProjectName$-Lib-$Platform$-$GraphicsApi$-$Config$',
          '$GfxName$-Lib-$Platform$-$Config$',
          'core-Lib-$Platform$-$Config$'
        }
        .LinkerOutput = '$OutputBase$\$ProjectName$\$ProjectName$.exe'
      }
      Alias( '$ProjectName$-$Platform$-$GraphicsApi$-$Config$' ) { .Targets = '$ProjectName$-Exe-$Platform$-$GraphicsApi$-$Config$' }
    }
    ForEach( .Config in .Configs_Linux)
    {
      Using( .Config )

      .CompilerOptions    + .gfxDefines

      .OutputBase + '\$Platform$-$GraphicsApi$-$Config$'
      //Print('$LinkerOptions$')
      //Print('$BaseIncludePaths$')
      // Static Library
      Library( '$ProjectName$-Lib-$Platform$-$GraphicsApi$-$Config$' )
      {
        // Input (Unity)
        .CompilerInputUnity   = '$ProjectName$-$GraphicsApi$-Unity-Linux'

          // Output
        .CompilerOutputPath   = '$OutputBase$\$ProjectName$\'
        .LibrarianOutput      = '$OutputBase$\$ProjectName$\$ProjectName$.a'
      }

      // Executable
      Executable( '$ProjectName$-Exe-$Platform$-$GraphicsApi$-$Config$' )
      {
        .Libraries = {
          '$ProjectName$-Lib-$Platform$-$GraphicsApi$-$Config$',
          '$GfxName$-Lib-$Platform$-$Config$'
          'core-Lib-$Platform$-$Config$',
        }
        .LinkerOutput = '$OutputBase$\$ProjectName$\$ProjectName$'
      }
      Alias( '$ProjectName$-$Platform$-$GraphicsApi$-$Config$' ) { .Targets = '$ProjectName$-Exe-$Platform$-$GraphicsApi$-$Config$' }
    }

    // Aliases
    //--------------------------------------------------------------------------
    .PlatConfigs = {"X64", "X64Linux"}
    // Per-Config
    Alias( '$ProjectName$-$GraphicsApi$-Debug' )    { .Targets = { '$ProjectName$-X64-$GraphicsApi$-Debug'} } // to gather all one platform configs
    Alias( '$ProjectName$-$GraphicsApi$-Profile' )  { .Targets = { '$ProjectName$-X64-$GraphicsApi$-Profile'} }
    Alias( '$ProjectName$-$GraphicsApi$-Release' )  { .Targets = { '$ProjectName$-X64-$GraphicsApi$-Release'} }

    // Per-Platform
    Alias( '$ProjectName$-X64-$GraphicsApi$' )  { .Targets = { '$ProjectName$-X64-$GraphicsApi$-Debug', '$ProjectName$-X64-$GraphicsApi$-Release', '$ProjectName$-X64-$GraphicsApi$-Profile' } }

    Alias( '$ProjectName$-x64Linux-$GraphicsApi$' ) { .Targets = { '$ProjectName$-X64Linux-$GraphicsApi$-Debug', '$ProjectName$-X64Linux-$GraphicsApi$-Release', '$ProjectName$-X64Linux-$GraphicsApi$-Profile' } }

    // All
    Alias( '$ProjectName$-$GraphicsApi$' )
    {
      .Targets = { '$ProjectName$-$GraphicsApi$-Debug', '$ProjectName$-$GraphicsApi$-Profile', '$ProjectName$-$GraphicsApi$-Release' }
    }
  }

  Alias( '$ProjectName$' )
  {
    .Targets = {'$ProjectName$-D3D12', '$ProjectName$-Vulkan', '$ProjectName$-Null'}
  }
}
