// FBuildApp
//------------------------------------------------------------------------------
{
  .ProjectName  = 'App'
  .ProjectPath  = 'app'

  // Visual Studio Project Generation
  //--------------------------------------------------------------------------
  VCXProject( '$ProjectName$-proj' )
  {
    .ProjectOutput          = '$ProjectPath$/$ProjectName$.vcxproj'
    .ProjectInputPaths      = '$ProjectPath$/'
    .ProjectBasePath        = '$ProjectPath$/'
    .OutputDirectory        = '^$(SolutionDir)/bin/^$(Platform)-^$(Configuration)/^$(ProjectName)'
    .LocalDebuggerCommand   = '^$(SolutionDir)/bin/^$(Platform)-^$(Configuration)/^$(ProjectName)/^$(ProjectName).exe'
    .LocalDebuggerWorkingDirectory = '^$(SolutionDir)/appspace/'
    .ProjectConfigs         = .ProjectConfigs
  }

  // Unity
  //--------------------------------------------------------------------------

  {
    // Common options
    .UnityInputPath     = '$ProjectPath$/'
    .UnityOutputPath    = '$OutputBase$/Unity/$ProjectPath$/'
    .UnityOutputPattern = 'Unity_$ProjectName$.cpp'

    // Windows
    Unity( '$ProjectName$-Unity-Windows' )
    {
    }
    // Linux
    Unity( '$ProjectName$-Unity-Linux' )
    {
    }
  }
  // Windows specials
  .CommonLinkerLibs   = ' /SUBSYSTEM:WINDOWS'
                      + ' kernel32.lib'
                      + ' user32.lib'
                      + ' gdi32.lib'
                      + ' winspool.lib'
                      + ' comdlg32.lib'
                      + ' advapi32.lib'
                      + ' shell32.lib'
                      + ' ole32.lib'
                      + ' oleaut32.lib'
                      + ' uuid.lib'
                      + ' odbc32.lib'
                      + ' odbccp32.lib'
                      + ' oldnames.lib'
                      + ' D3d12.lib'
                      + ' Dxgi.lib'
                      + ' atls.lib'
                      + ' Shcore.lib'
                      + ' D3DCompiler.lib'
                      + ' dxguid.lib'
					  + ' Imm32.lib'
  .Debuglinkerlibs    = ' libcpmtd.lib' // brings thread support
					            + ' libcmtd.lib'
                      + ' libucrtd.lib'
                      + ' libvcruntimed.lib'
					            + ' libconcrtd1.lib'
                      + .extDebLibs
  .Releaselinkerlibs  = ' libcpmt.lib'
					            + ' libcmt.lib'
                      + ' libucrt.lib'
                      + ' libvcruntime.lib'
					            + ' libconcrt1.lib'
                      + .extRelLibs
  .Profilelinkerlibs  = .Releaselinkerlibs

  .X64DebugConfiguration =
  [
    Using (.X64DebugConfig)
    .LinkerOptions  + .CommonLinkerLibs
                    + .Debuglinkerlibs
  ]

  .X64ProfileConfiguration =
  [
    Using (.X64ProfileConfig)
    .LinkerOptions  + .CommonLinkerLibs
                    + .Profilelinkerlibs
  ]

  .X64ReleaseConfiguration =
  [
    Using (.X64ReleaseConfig)
    .LinkerOptions  + .CommonLinkerLibs
                    + .Releaselinkerlibs
  ]


  .Configs_Windows_MSVC2 = { .X64DebugConfiguration, .X64ProfileConfiguration, .X64ReleaseConfiguration }


// linux
  .LinuxCommonLinkerLibs   = ' '
  .LinuxDebuglinkerlibs    = ' ' // brings thread support
                           + .extDebLibs
  .LinuxReleaselinkerlibs  = ' '
                           + .extRelLibs
  .LinuxProfilelinkerlibs  = .LinuxReleaselinkerlibs

  .X64LinuxDebugConfiguration =
  [
    Using (.X64LinuxDebugConfig)
    .LinkerOptions  + .LinuxCommonLinkerLibs
                    + .LinuxDebuglinkerlibs
  ]

  .X64LinuxProfileConfiguration =
  [
    Using (.X64LinuxProfileConfig)
    .LinkerOptions  + .LinuxCommonLinkerLibs
                    + .LinuxProfilelinkerlibs
  ]

  .X64LinuxReleaseConfiguration =
  [
    Using (.X64LinuxReleaseConfig)
    .LinkerOptions  + .LinuxCommonLinkerLibs
                    + .LinuxReleaselinkerlibs
  ]


  .Configs_Windows_MSVC2 = { .X64DebugConfiguration, .X64ProfileConfiguration, .X64ReleaseConfiguration }
  .Configs_Linux = { .X64LinuxDebugConfiguration, .X64LinuxProfileConfiguration, .X64LinuxReleaseConfiguration }

  // Windows (MSVC)
  //--------------------------------------------------------------------------

  ForEach( .Config in .Configs_Windows_MSVC2 )
  {
    Using( .Config )

    .OutputBase + '/$Platform$-$Config$'

    // Static Library
    Library( '$ProjectName$-Lib-$Platform$-$Config$' )
    {
      // Unity build
      .CompilerInputUnity   = '$ProjectName$-Unity-Windows'
      // Normal build
      //.CompilerInputPath  = '$ProjectPath$/'

        // Output
      .CompilerOutputPath   = '$OutputBase$/$ProjectName$/'
      .LibrarianOutput      = '$OutputBase$/$ProjectName$/$ProjectName$.lib'
    }

    // Executable
    Executable( '$ProjectName$-Exe-$Platform$-$Config$' )
    {
      .Libraries = {
        '$ProjectName$-Lib-$Platform$-$Config$',
        'graphics-Lib-$Platform$-$Config$',
        'core-Lib-$Platform$-$Config$'
      }
      .LinkerOutput = '$OutputBase$/$ProjectName$/$ProjectName$.exe'
    }
    Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Exe-$Platform$-$Config$' }
  }
  ForEach( .Config in .Configs_Linux)
  {
    Using( .Config )

    .OutputBase + '/$Platform$-$Config$'

    // Static Library
    Library( '$ProjectName$-Lib-$Platform$-$Config$' )
    {
      // Input (Unity)
      .CompilerInputUnity   = '$ProjectName$-Unity-Linux'

        // Output
      .CompilerOutputPath   = '$OutputBase$/$ProjectName$/'
      .LibrarianOutput      = '$OutputBase$/$ProjectName$/$ProjectName$.a'
    }

    // Executable
    Executable( '$ProjectName$-Exe-$Platform$-$Config$' )
    {
      .Libraries = {
        '$ProjectName$-Lib-$Platform$-$Config$',
        'Graphics-Lib-$Platform$-$Config$'
        'core-Lib-$Platform$-$Config$',
      }
      .LinkerOutput = '$OutputBase$/$ProjectName$/$ProjectName$'
    }
    Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Exe-$Platform$-$Config$' }
  }

  // Aliases
  //--------------------------------------------------------------------------
  .PlatConfigs = {"X64", "X64Linux"}
  // Per-Config
  Alias( '$ProjectName$-Debug' )    { .Targets = { '$ProjectName$-X64-Debug'} } // to gather all one platform configs
  Alias( '$ProjectName$-Profile' )  { .Targets = { '$ProjectName$-X64-Profile'} }
  Alias( '$ProjectName$-Release' )  { .Targets = { '$ProjectName$-X64-Release'} }

  // Per-Platform
  Alias( '$ProjectName$-X64' )  { .Targets = { '$ProjectName$-X64-Debug', '$ProjectName$-X64-Release', '$ProjectName$-X64-Profile' } }

  Alias( '$ProjectName$-x64Linux' ) { .Targets = { '$ProjectName$-X64Linux-Debug', '$ProjectName$-X64Linux-Release', '$ProjectName$-X64Linux-Profile' } }

  // All
  Alias( '$ProjectName$' )
  {
    .Targets = { '$ProjectName$-Debug', '$ProjectName$-Profile', '$ProjectName$-Release' }
  }
}
