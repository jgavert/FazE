#include "config.bff"
#include "externals/externals.bff"

;-------------------------------------------------------------------------------
; Settings
;-------------------------------------------------------------------------------
Settings
{
    #if __WINDOWS__
        .Environment  = { "PATH=$VSBasePath$/Common7/IDE/;$VSBasePath$/VC/bin/",
                            "TMP=C:/Windows/Temp",
                            "SystemRoot=C:/Windows" }
    #endif
    .CachePath    = .FBuildCache
}
// definitions
Compiler( 'Compiler-x64' )
{
  .Root   = '$VSBasePath$/VC/Tools/MSVC/14.10.25017/bin/HostX64/x64'
  .helperPath = '$VSBasePath$/VC/Redist/MSVC/14.10.25008/x64/Microsoft.VC150.CRT'
  .Executable = '$Root$/cl.exe'
  .ExtraFiles = { '$Root$/c1.dll'
                  '$Root$/atlprov.dll',
                  '$Root$/c1xx.dll',
                  '$Root$/dpcmi.dll',
                  '$Root$/c2.dll',
                  '$Root$/1033/clui.dll',
                  '$Root$/msobj140.dll',
                  '$Root$/mspdb140.dll',
                  '$Root$/mspdbsrv.exe',
                  '$Root$/mspdbst.dll',
                  '$Root$/mspdbcore.dll',
                  '$Root$/mspft140.dll',
                  '$Root$/msvcdis140.dll',
                  '$Root$/pgodb140.dll',
                  '$Root$/pgort140.dll',
                  '$Root$/vcmeta.dll',
                  '$helperPath$/msvcp140.dll',
                  '$helperPath$/vcruntime140.dll',
                  '$helperPath$/vccorlib140.dll',
                  '$helperPath$/concrt140.dll'
                  }

	//.Root = '$VSBasePath$/VC/ClangC2'
	//.Executable = '$Root$/bin/amd64/clang.exe'
	//.Executable = 'C:/Program Files/LLVM/bin/clang-cl.exe'
	//.ExtraFiles = { '$Root$/bin/amd64/amd64/c2.dll' }

}

Compiler( 'Compiler-x64-Linux' )
{
  .Executable = '/usr/bin/g++'
}

// Resource Compiler
//------------------------------------------------------------------------------
.ResourceCompiler =
[
  .Compiler         = '$WindowsSDKBasePath10$/Bin/x64/RC.exe'
  .CompilerOutputExtension  = '.res'
  .CompilerOptions      = '/nologo /fo"%2" %1'
]
//------------------------------------------------------------------------------
// Configurations
//------------------------------------------------------------------------------
.MSVCBaseConfig =
[
  .AdditionalWarnings = '' // ' /we4062' // enumerator 'identifier' in a switch of enum 'enumeration' is not handled
                  //   + ' /we4263' // 'function' : member function does not override any base class virtual member function
                  //   + ' /we4296' // 'operator': expression is always false
                  //   + ' /we4555' // expression has no effect; expected expression with side-effect
                  //   + ' /we4619' // #pragma warning : there is no warning number 'number'
                  //   + ' /we4640' // 'instance' : construction of local static object is not thread-safe
                  //   + ' /we4826' // Conversion from 'type1 ' to 'type_2' is sign-extended. This may cause unexpected runtime behavior.
                  //   + ' /we4836' // nonstandard extension used : 'type' : local types or unnamed types cannot be used as template arguments
                  //   + ' /we4905' // wide string literal cast to 'LPSTR'
                  //   + ' /we4906' // string literal cast to 'LPWSTR'
                       + ' /wd4996' // sparsepp on debug
                       + ' /wd4127' // conditional expression is constant (so what)
                       + ' /wd4505' // 'vk::getString': unreferenced local function has been removed
                       + ' /wd4065' // switch statement contains 'default' but no 'case' labels
                       + ' /wd4714' // function 'function' marked as __forceinline not inlined

  .CompilerOptions    = '"%1" /Z7 /nologo /c /W4 /std:c++latest'
                      + ' /WX' // warnings as errors, also required as fastbuild hides warnings
					  //+ ' /analyze' // enable analyzing of c++ code for problems. Super slow and generates errors that are nice to see, not useful to fix.
                      + ' /TP' // compile as c++
                      + ' /Zc:inline'     // Remove unreferenced COMDATs at compile time (VS2013.2+)
                      + ' /Zc:strictStrings'  // Require const only usage of string literals (VS2013+)
                      + .AdditionalWarnings
                      + ' /fp:fast'
					  // generic windows defines
                      + ' /DWIN32_LEAN_AND_MEAN /D_WIN32 /DWIN64 /D__WINDOWS__ /DNOMINMAX /D_CRT_SECURE_NO_WARNINGS /D_WINSOCK_DEPRECATED_NO_WARNINGS'
                      //+ ' /D_WIN32_WINNT_WIN10'
                      // + ' /D_CRT_SECURE_NO_WARNINGS' // don't warn about unsafe functions
                      // + ' /D_WINSOCK_DEPRECATED_NO_WARNINGS' // don't warn about deprecated winsock functions - TODO:C Update API use
                      //+ ' /showIncludes'
                      + ' /Gd'
                      + '$extDefines$'
  .PCHOptions         = .CompilerOptions
                      + ' /Fp"%2" /Fo"%3"'
  .CompilerOptions    + ' /Fo"%2"'
  .LibrarianOptions   = ' /NODEFAULTLIB /NOLOGO /OUT:"%2" "%1"'
  .LinkerOptions      = ' /NODEFAULTLIB /NOLOGO /INCREMENTAL:NO /OUT:"%2" "%1" /DEBUG'
                      + ' /IGNORE:4001'  // don't complain about linking libs only
                      + ' /IGNORE:4217' // don't complain about locally defined symbols
                      + ' /IGNORE:4049' // urgh

  // Optimizations
  .CompilerDebugOptimizations     = ' /MTd /Od /RTC1 /GS /Oy- /GR- /EHsc'
  .CompilerReleaseOptimizations   = ' /MT /Ox /Oy /Oi /GS- /GF /GL /Gy /Gw /GR- /EHsc'
  .LibrarianDebugOptimizations    = ''
  .LibrarianReleaseOptimizations  = ' /LTCG'
  .LinkerDebugOptimizations       = ''
  .LinkerReleaseOptimizations     = ' /LTCG /OPT:REF,ICF'

  .BaseIncludePaths   = ' /I"./"'
                      + ' /I"$VSBasePath$/VC/Tools/MSVC/14.10.25017/include/"'
                      + ' /I"$VSBasePath$/VC/Tools/MSVC/14.10.25017/atlmfc/include/"'
                      + ' /I"$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/shared"'
                      + ' /I"$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/ucrt"'
                      + ' /I"$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/um"'
                      + ' /I"$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/winrt"'
                      + .externalIncludes

  .CompilerOptions    + .BaseIncludePaths
  .PCHOptions         + .BaseIncludePaths

  .WindowsLibPaths10  = '$WindowsSDKBasePath10$/lib/$WindowsSDKSubVersion$/ucrt'
  .WindowsLibPaths10d = '$WindowsSDKBasePath10$/lib/$WindowsSDKSubVersion$/um/'

  .UseExceptions      = ' /EHsc'
]

.LinuxBaseConfig =
[
  .Compiler               = 'Compiler-x64-Linux'
  .BaseCompilerOptions    = '"%1"'          // Input
                          + ' -o "%2"'      // Output
                          + ' -c'           // Compile only
                          + ' -g'           // Debug information for gdb
                          + ' -Wall'        // warnings
                          + ' -Werror'      // warnings as errors
                          + ' -Wfatal-errors'
                          + ' -Wno-missing-braces' // strange warning
                          + ' -Wno-unused-private-field'
                          + ' -Wno-unused-variable'
                          + ' -Wno-unused-function'
                          + ' -Wno-ignored-attributes'
                          + ' -m64'         // x86-64
                          + ' -std=c++14'   // allow C++14 features
                          + ' -msse4.2'     // SSE4.2
                          + ' -DFAZE_PLATFORM_LINUX -D__LINUX__'
                          + .extDefines
  .BaseIncludePaths       = ' "-I" "."' // TODO: horrible
                          //+ ' -isystem /usr/include'
                          + '$externalIncludes$'
  .CompilerOptions        = .BaseCompilerOptions
                          + .BaseIncludePaths
  .Librarian              = '/usr/bin/ar'
  .Linker                 = '/usr/bin/clang++'
  .LinkerOptions          = '"%1" -o "%2" -use-gold-plugin -lpthread -lstdc++fs'
  .LibrarianOptions       = 'rcs "%2" "%1"'

    // Optimizations
  .CompilerDebugOptimizations     = ' -O0'
  .CompilerReleaseOptimizations   = ' -O3'
  .LibrarianDebugOptimizations    = ''
  .LibrarianReleaseOptimizations  = ''
  .LinkerDebugOptimizations       = ''
  .LinkerReleaseOptimizations     = ''
]

// X64
//------------------------------------------------------------------------------
.X64BaseConfig =
[
  Using( .MSVCBaseConfig )
  .ToolsBasePath      = '$VSBasePath$/VC/Tools/MSVC/14.10.25017/bin/HostX64/x64'
  .Compiler           = 'Compiler-x64'
  .Librarian          = '$ToolsBasePath$/lib.exe'
  .Linker             = '$ToolsBasePath$/link.exe'
  .CompilerOptions    + ' /DFAZE_PLATFORM_WINDOWS'
  .PCHOptions         + ' /DFAZE_PLATFORM_WINDOWS'
  .LinkerOptions      + ' /MACHINE:X64'
  .Platform           = 'x64'
  .LinkerOptions      + ' /LIBPATH:"$WindowsLibPaths10$/x64"'
                      + ' /LIBPATH:"$WindowsLibPaths10d$/x64"'
                      + ' /LIBPATH:"$VSBasePath$/VC/Tools/MSVC/14.10.25017/lib/x64"'
                      + ' /LIBPATH:"$VSBasePath$/VC/Tools/MSVC/14.10.25017/atlmfc/lib/x64"'
                      + .extLibPaths

  //Print('$LinkerOptions$')
]

.X64DebugConfig =
[
  Using( .X64BaseConfig )
  .Config             = 'Debug'
  .CompilerOptions    + ' /DDEBUG /D_DEBUG /DPROFILING_ENABLED /D_CRTDBG_MAP_ALLOC'
                      + .CompilerDebugOptimizations
  .PCHOptions         + ' /DDEBUG /D_DEBUG /DPROFILING_ENABLED /D_CRTDBG_MAP_ALLOC'
                      + .CompilerDebugOptimizations
  .LibrarianOptions   + .LibrarianDebugOptimizations
  .LinkerOptions      + .LinkerDebugOptimizations
]

.X64ReleaseConfig =
[
  Using( .X64BaseConfig )
  .Config             = 'Release'
  .CompilerOptions    + ' /DRELEASE'
  .PCHOptions         + ' /DRELEASE'

  // Setup de-optimization options (FASTBUILD_DEOPTIMIZE_OBJECT)
  .DeoptimizeWritableFilesWithToken   = true
  .CompilerOptionsDeoptimized         = '$CompilerOptions$ /Od'
  .PCHOptionsDeoptimized              = '$PCHOptions$ /Od'

  .CompilerOptions    + .CompilerReleaseOptimizations
  .PCHOptions         + .CompilerReleaseOptimizations
  .LibrarianOptions   + .LibrarianReleaseOptimizations
  .LinkerOptions      + .LinkerReleaseOptimizations
]

.X64ProfileConfig =
[
  Using( .X64ReleaseConfig ) // Note: based on Release config
  .Config             = 'Profile'
  .CompilerOptions    + ' /DPROFILING_ENABLED'
  .PCHOptions         + ' /DPROFILING_ENABLED'
  .LinkerOptions      + ' /Profile'

  .DeoptimizeWritableFilesWithToken = false
]

// linux


.X64LinuxBaseConfig =
[
    Using( .LinuxBaseConfig )
    .Platform               = 'x64Linux'
    .LinkerOptions          + .extLibPaths
]
.X64LinuxDebugConfig =
[
    Using( .X64LinuxBaseConfig )
    .Config                 = 'Debug'
    .CompilerOptions        + ' -DDEBUG -DPROFILING_ENABLED'
                            + .CompilerDebugOptimizations
    .LibrarianOptions       + .LibrarianDebugOptimizations
    .LinkerOptions          + .LinkerDebugOptimizations
]
.X64LinuxReleaseConfig =
[
    Using( .X64LinuxBaseConfig )
    .Config                 = 'Release'
    .CompilerOptions        + ' -DRELEASE'
                            + .CompilerReleaseOptimizations
    .LibrarianOptions       + .LibrarianReleaseOptimizations
    .LinkerOptions          + .LinkerReleaseOptimizations
]
.X64LinuxProfileConfig =
[
    Using( .X64LinuxReleaseConfig ) // Note: based on Release config
    .Config                 = 'Profile'
    .CompilerOptions        + ' -DPROFILING_ENABLED'
]

.OutputBase = 'bin'

//------------------------------------------------------------------------------
// Unity/Blob files (shared across configs)
//------------------------------------------------------------------------------
.UnityInputIsolateWritableFiles = false 

//------------------------------------------------------------------------------
// VisualStudio Project Generation
//------------------------------------------------------------------------------
.ProjectCommon =
[
  .ProjectBuildCommand      = 'cd ^$(SolutionDir)/ &amp; fbuild -ide -dist -cache -summary ^$(ProjectName)-^$(Platform)-^$(Configuration)'
  .ProjectRebuildCommand    = 'cd ^$(SolutionDir)/ &amp; fbuild -ide -dist -cache -clean -summary ^$(ProjectName)-^$(Platform)-^$(Configuration)'
  .OutputDirectory          = '^$(SolutionDir)/bin/^$(Platform)-^$(Configuration)/^$(ProjectName)'
  .IntermediateDirectory    = '^$(SolutionDir)/bin/^$(Platform)-^$(Configuration)/^$(ProjectName)'
  .Platform                 = 'x64'
  .PlatformToolset          = 'v141'
  .IncludeSearchPath        = '^$(SolutionDir);./;$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/um;'
                            + '$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/shared;'
                            + '$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/ucrt;'
                            + '$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/winrt;'
                            + '$externalIncludesVisualStudio$'
  .X64Defines               = 'WIN32_LEAN_AND_MEAN;_WIN32;__WINDOWS__;NOMINMAX;WIN64;_CRT_SECURE_NO_WARNINGS;_WINSOCK_DEPRECATED_NO_WARNINGS;__cplusplus;'
							              + 'FAZE_PLATFORM_WINDOWS;'
                            + '$extVisualStudioDefines$'
  .DebugDefines             = 'DEBUG;PROFILING_ENABLED;_CRTDBG_MAP_ALLOC;_DEBUG'
  .ProfileDefines           = 'RELEASE;PROFILING_ENABLED'
  .ReleaseDefines           = 'RELEASE'
]
// not everything needs graphics targets
.ProjectX64Debug      = [ Using( .ProjectCommon ) .Config = 'Debug'   .PreprocessorDefinitions = .X64Defines + .DebugDefines ]
.ProjectX64Profile    = [ Using( .ProjectCommon ) .Config = 'Profile' .PreprocessorDefinitions = .X64Defines + .ProfileDefines ]
.ProjectX64Release    = [ Using( .ProjectCommon ) .Config = 'Release' .PreprocessorDefinitions = .X64Defines + .ReleaseDefines ]

.ProjectConfigs = {.ProjectX64Debug, .ProjectX64Profile, .ProjectX64Release}


VCXProject( 'All-proj' )
{
  .ProjectOutput    = './All.vcxproj'
  .ProjectFiles     = { './fbuild.bff', './base.bff', './externals/externals.bff', './config.bff' }
  .ProjectBasePath  = './'
}

// helper definitions
.Configs              = { .X64DebugConfig, .X64ProfileConfig, .X64ReleaseConfig ,
                          .X64LinuxDebugConfig, .X64LinuxProfileConfig, .X64LinuxReleaseConfig }
.Configs_Windows_MSVC = { .X64DebugConfig, .X64ProfileConfig, .X64ReleaseConfig }
.Configs_Linux        = { .X64LinuxDebugConfig, .X64LinuxProfileConfig, .X64LinuxReleaseConfig }

