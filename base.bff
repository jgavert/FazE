#include "config.bff"
#include "externals/externals.bff"

;-------------------------------------------------------------------------------
; Settings
;-------------------------------------------------------------------------------
Settings
{
    #if __WINDOWS__
        .Environment  = { "PATH=$VSBasePath$\Common7\IDE\;$VSBasePath$\VC\bin\",
                            "TMP=C:\Windows\Temp",
                            "SystemRoot=C:\Windows" }
    #endif
    .CachePath    = .FBuildCache
}
// definitions
Compiler( 'Compiler-x64' )
{
  .Root   = '$VSBasePath$\VC\bin'
  .Executable = '$Root$\amd64\cl.exe'
  .ExtraFiles = { '$Root$\amd64\c1.dll'
                  '$Root$\amd64\atlprov.dll',
                  '$Root$\amd64\c1xx.dll',
                  '$Root$\amd64\dpcmi.dll',
                  '$Root$\amd64\c2.dll',
                  '$Root$\amd64\1033\clui.dll',
                  '$Root$\amd64\msobj140.dll',
                  '$Root$\amd64\mspdb140.dll',
                  '$Root$\amd64\mspdbsrv.exe',
                  '$Root$\amd64\mspdbst.dll',
                  '$Root$\amd64\mspdbcore.dll',
                  '$Root$\amd64\mspft140.dll',
                  '$Root$\amd64\msvcdis140.dll',
                  '$Root$\amd64\pgodb140.dll',
                  '$Root$\amd64\pgort140.dll',
                  '$Root$\amd64\vcmeta.dll',
                  '$VSBasePath$\VC\redist\x64\Microsoft.VC140.CRT\msvcp140.dll',
                  '$VSBasePath$\VC\redist\x64\Microsoft.VC140.CRT\vcruntime140.dll',
                  '$VSBasePath$\VC\redist\x64\Microsoft.VC140.CRT\vccorlib140.dll',
                  '$VSBasePath$\VC\redist\x64\Microsoft.VC140.CRT\concrt140.dll'
                  }
}

Compiler( 'Compiler-x64-Linux' )
{
  .Executable = '/usr/bin/clang++'
}

// Resource Compiler
//------------------------------------------------------------------------------
.ResourceCompiler =
[
  .Compiler         = '$WindowsSDKBasePath10$\Bin\x64\RC.exe'
  .CompilerOutputExtension  = '.res'
  .CompilerOptions      = '/nologo /fo"%2" %1'
]
//------------------------------------------------------------------------------
// Configurations
//------------------------------------------------------------------------------
.MSVCBaseConfig =
[
  .AdditionalWarnings = '' // ' /we4062' // enumerator 'identifier' in a switch of enum 'enumeration' is not handled
                  //   + ' /we4263' // 'function' : member function does not override any base class virtual member function
                  //   + ' /we4296' // 'operator': expression is always false
                  //   + ' /we4555' // expression has no effect; expected expression with side-effect
                  //   + ' /we4619' // #pragma warning : there is no warning number 'number'
                  //   + ' /we4640' // 'instance' : construction of local static object is not thread-safe
                  //   + ' /we4826' // Conversion from 'type1 ' to 'type_2' is sign-extended. This may cause unexpected runtime behavior.
                  //   + ' /we4836' // nonstandard extension used : 'type' : local types or unnamed types cannot be used as template arguments
                  //   + ' /we4905' // wide string literal cast to 'LPSTR'
                  //   + ' /we4906' // string literal cast to 'LPWSTR'
                       + ' /wd4505' // 'vk::getString': unreferenced local function has been removed
                       + ' /wd4065' // switch statement contains 'default' but no 'case' labels

  .CompilerOptions    = '"%1" /Z7 /nologo /c /W4'
                      + ' /WX' // warnings as errors, also required as fastbuild hides warnings
                      + ' /TP' // compile as c++
                      + ' /Zc:inline'     // Remove unreferenced COMDATs at compile time (VS2013.2+)
                      + ' /Zc:strictStrings'  // Require const only usage of string literals (VS2013+)
                      + .AdditionalWarnings
                      + ' /fp:fast'
                      + ' /DWIN32_LEAN_AND_MEAN /D_WIN32 /D__WINDOWS__'
                      + ' /D_CRT_SECURE_NO_WARNINGS' // don't warn about unsafe functions
                      + ' /D_WINSOCK_DEPRECATED_NO_WARNINGS' // don't warn about deprecated winsock functions - TODO:C Update API use
                      //+ ' /showIncludes'
                      + ' /Gd'
                      + '$extDefines$'
                      + ' /DPLATFORM_LINUX'
  .PCHOptions         = .CompilerOptions
                      + ' /Fp"%2" /Fo"%3"'
  .CompilerOptions    + ' /Fo"%2"'
  .LibrarianOptions   = ' /NODEFAULTLIB /NOLOGO /OUT:"%2" "%1"'
  .LinkerOptions      = ' /NODEFAULTLIB /NOLOGO /INCREMENTAL:NO /OUT:"%2" "%1" /DEBUG'
                      + ' /IGNORE:4001'  // don't complain about linking libs only
            + ' /IGNORE:4217' // don't complain about locally defined symbols
            + ' /IGNORE:4049' // urgh

  // Optimizations
  .CompilerDebugOptimizations     = ' /MTd /Od /RTC1 /GS /Oy- /GR- /EHsc'
  .CompilerReleaseOptimizations   = ' /MT /Ox /Oy /Oi /GS- /GF /GL /Gy /Gw /GR- /EHsc'
  .LibrarianDebugOptimizations    = ''
  .LibrarianReleaseOptimizations  = ' /LTCG'
  .LinkerDebugOptimizations       = ''
  .LinkerReleaseOptimizations     = ' /LTCG /OPT:REF,ICF'

  .BaseIncludePaths   = ' /I"./"'
                      + ' /I"$VSBasePath$/VC/include/"'
                      + ' /I"$VSBasePath$/VC/atlmfc/include/"'
                      + ' /I"$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/shared"'
                      + ' /I"$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/ucrt"'
                      + ' /I"$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/um"'
                      + ' /I"$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/winrt"'
                      + .externalIncludes

  .CompilerOptions    + .BaseIncludePaths
  .PCHOptions         + .BaseIncludePaths

  //.WindowsLibPaths  = '$WindowsSDKBasePath$/lib/winv6.3/um'
  .WindowsLibPaths10  = '$WindowsSDKBasePath10$/lib/$WindowsSDKSubVersion$/ucrt'
  .WindowsLibPaths10d = '$WindowsSDKBasePath10$/lib/$WindowsSDKSubVersion$/um/'

  .UseExceptions      = ' /EHsc'
]

.LinuxBaseConfig =
[
  .Compiler               = 'Compiler-x64-Linux'
  .BaseCompilerOptions    = '"%1"'          // Input
                          + ' -o "%2"'      // Output
                          + ' -c'           // Compile only
                          + ' -g'           // Debug information for gdb
                          + ' -Wall'        // warnings
                          + ' -Werror'      // warnings as errors
                          + ' -Wfatal-errors'
                          + ' -Wno-missing-braces' // strange warning
                          + ' -Wno-unused-private-field'
                          + ' -Wno-unused-variable'
                          + ' -Wno-unused-function'
                          + ' -m64'         // x86-64
                          + ' -std=c++14'   // allow C++14 features
                          + ' -msse4.2'     // SSE4.2
                          + ' -DPLATFORM_LINUX -D__LINUX__'
                          + .extDefines
  .BaseIncludePaths       = ' "-I" "."' // TODO: horrible
                          + ' -isystem /usr/include'
                          + '$externalIncludes$'
  .CompilerOptions        = .BaseCompilerOptions
                          + .BaseIncludePaths
  .Librarian              = '/usr/bin/ar'
  .Linker                 = '/usr/bin/clang++'
  .LinkerOptions          = '"%1" -o "%2" -use-gold-plugin'
  .LibrarianOptions       = 'rcs "%2" "%1"'

    // Optimizations
  .CompilerDebugOptimizations     = ' -O0'
  .CompilerReleaseOptimizations   = ' -O3'
  .LibrarianDebugOptimizations    = ''
  .LibrarianReleaseOptimizations  = ''
  .LinkerDebugOptimizations       = ''
  .LinkerReleaseOptimizations     = ''
]

// X64
//------------------------------------------------------------------------------
.X64BaseConfig =
[
  Using( .MSVCBaseConfig )
  .ToolsBasePath      = '$VSBasePath$\VC\bin\amd64'
  .Compiler           = 'Compiler-x64'
  .Librarian          = '$ToolsBasePath$\lib.exe'
  .Linker             = '$ToolsBasePath$\link.exe'
  .CompilerOptions    + ' /DWIN64 /DPLATFORM_WINDOWS /DPF_WINDOWS'
  .PCHOptions         + ' /DWIN64 /DPLATFORM_WINDOWS /DPF_WINDOWS'
  .LinkerOptions      + ' /MACHINE:X64'
  .Platform           = 'x64'
  .LinkerOptions      + ' /LIBPATH:"$WindowsLibPaths10$/x64"'
                      + ' /LIBPATH:"$WindowsLibPaths10d$/x64"'
                      //+ ' /LIBPATH:"$WindowsLibPaths$/x64"'
                      + ' /LIBPATH:"$VSBasePath$/VC/lib/amd64"'
                      + ' /LIBPATH:"$VSBasePath$/VC/atlmfc/lib/amd64"'
                      + .extLibPaths

  //Print('$LinkerOptions$')
]

.X64DebugConfig =
[
  Using( .X64BaseConfig )
  .Config             = 'Debug'
  .CompilerOptions    + ' /DDEBUG /D_DEBUG /DPROFILING_ENABLED /D_CRTDBG_MAP_ALLOC'
                      + .CompilerDebugOptimizations
  .PCHOptions         + ' /DDEBUG /D_DEBUG /DPROFILING_ENABLED /D_CRTDBG_MAP_ALLOC'
                      + .CompilerDebugOptimizations
  .LibrarianOptions   + .LibrarianDebugOptimizations
  .LinkerOptions      + .LinkerDebugOptimizations
]

.X64ReleaseConfig =
[
  Using( .X64BaseConfig )
  .Config             = 'Release'
  .CompilerOptions    + ' /DRELEASE'
  .PCHOptions         + ' /DRELEASE'

  // Setup de-optimization options (FASTBUILD_DEOPTIMIZE_OBJECT)
  .DeoptimizeWritableFilesWithToken   = true
  .CompilerOptionsDeoptimized         = '$CompilerOptions$ /Od'
  .PCHOptionsDeoptimized              = '$PCHOptions$ /Od'

  .CompilerOptions    + .CompilerReleaseOptimizations
  .PCHOptions         + .CompilerReleaseOptimizations
  .LibrarianOptions   + .LibrarianReleaseOptimizations
  .LinkerOptions      + .LinkerReleaseOptimizations
]

.X64ProfileConfig =
[
  Using( .X64ReleaseConfig ) // Note: based on Release config
  .Config             = 'Profile'
  .CompilerOptions    + ' /DPROFILING_ENABLED'
  .PCHOptions         + ' /DPROFILING_ENABLED'
  .LinkerOptions	  + ' /Profile'

  .DeoptimizeWritableFilesWithToken = false
]

// linux


.X64LinuxBaseConfig =
[
    Using( .LinuxBaseConfig )
    .Platform               = 'x64Linux'
]
.X64LinuxDebugConfig =
[
    Using( .X64LinuxBaseConfig )
    .Config                 = 'Debug'
    .CompilerOptions        + ' -DDEBUG -DPROFILING_ENABLED'
                            + .CompilerDebugOptimizations
    .LibrarianOptions       + .LibrarianDebugOptimizations
    .LinkerOptions          + .LinkerDebugOptimizations
]
.X64LinuxReleaseConfig =
[
    Using( .X64LinuxBaseConfig )
    .Config                 = 'Release'
    .CompilerOptions        + ' -DRELEASE'
                            + .CompilerReleaseOptimizations
    .LibrarianOptions       + .LibrarianReleaseOptimizations
    .LinkerOptions          + .LinkerReleaseOptimizations
]
.X64LinuxProfileConfig =
[
    Using( .X64LinuxReleaseConfig ) // Note: based on Release config
    .Config                 = 'Profile'
    .CompilerOptions        + ' -DPROFILING_ENABLED'
]

.OutputBase = 'bin'

//------------------------------------------------------------------------------
// Unity/Blob files (shared across configs)
//------------------------------------------------------------------------------
.UnityInputIsolateWritableFiles = true

//------------------------------------------------------------------------------
// VisualStudio Project Generation
//------------------------------------------------------------------------------
.ProjectCommon =
[
  .ProjectBuildCommand      = 'cd ^$(SolutionDir)\ &amp; fbuild -vs -dist -cache -summary ^$(ProjectName)-^$(Platform)-^$(Configuration)'
  .ProjectRebuildCommand    = 'cd ^$(SolutionDir)\ &amp; fbuild -vs -dist -cache -clean -summary ^$(ProjectName)-^$(Platform)-^$(Configuration)'
  .OutputDirectory          = '^$(SolutionDir)\bin\^$(Platform)-^$(Configuration)\^$(ProjectName)'
  .IntermediateDirectory    = '^$(SolutionDir)\bin\^$(Platform)-^$(onfiguration)\^$(ProjectName)'
  .Platform                 = 'x64'
  .PlatformToolset          = 'v140'
  .IncludeSearchPath        = '^$(SolutionDir);.\;$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/um;'
                            + '$WindowsSDKBasePath10$/include/$WindowsSDKSubVersion$/shared;'
                            + '$externalIncludesVisualStudio$'
  .X64Defines               = 'WIN32_LEAN_AND_MEAN;_WIN32;__WINDOWS__;WIN64;WINDOWS;PF_WINDOWS;PLATFORM_WINDOWS;'
              + '$extVisualStudioDefines$'
  .DebugDefines             = 'DEBUG;PROFILING_ENABLED;_CRTDBG_MAP_ALLOC;_DEBUG'
  .ProfileDefines           = 'RELEASE;PROFILING_ENABLED'
  .ReleaseDefines           = 'RELEASE'
]
// not everything needs graphics targets
.ProjectX64Debug      = [ Using( .ProjectCommon ) .Config = 'Debug'   .PreprocessorDefinitions = .X64Defines + .DebugDefines ]
.ProjectX64Profile    = [ Using( .ProjectCommon ) .Config = 'Profile' .PreprocessorDefinitions = .X64Defines + .ProfileDefines ]
.ProjectX64Release    = [ Using( .ProjectCommon ) .Config = 'Release' .PreprocessorDefinitions = .X64Defines + .ReleaseDefines ]

.ProjectConfigs = {.ProjectX64Debug, .ProjectX64Profile, .ProjectX64Release}

#if __WINDOWS__
.D3D12Define  = 'GFX_D3D12'
#endif
.VulkanDefine = 'GFX_VULKAN'
.NullDefine   = 'GFX_NULL'

// global gfx backend config
#if __WINDOWS__
.GfxDX12         = [ .GraphicsApi = 'D3D12'  .GfxName = 'GfxDx12' .gfxDefines = ' /D$D3D12Define$']
.GfxVulkan       = [ .GraphicsApi = 'Vulkan' .GfxName = 'GfxVk'   .gfxDefines = ' /D$VulkanDefine$']
.GfxNull         = [ .GraphicsApi = 'Null'   .GfxName = 'GfxNull' .gfxDefines = ' /D$NullDefine$']
#endif
#if __LINUX__
.GfxVulkan       = [ .GraphicsApi = 'Vulkan' .GfxName = 'GfxVk'   .gfxDefines = ' -D$VulkanDefine$']
.GfxNull         = [ .GraphicsApi = 'Null'   .GfxName = 'GfxNull' .gfxDefines = ' -D$NullDefine$']
#endif

#if __WINDOWS__
.GraphicsBackends = {.GfxDX12, .GfxVulkan, .GfxNull }
#endif
#if __LINUX__
.GraphicsBackends = {.GfxVulkan, .GfxNull }
#endif

// Solution targets
#if __WINDOWS__
.ProjectX64D3D12Debug      = [ Using( .ProjectX64Debug )   .Config  = 'D3D12-Debug'   .PreprocessorDefinitions + ';$D3D12Define$']
.ProjectX64D3D12Profile    = [ Using( .ProjectX64Profile ) .Config  = 'D3D12-Profile' .PreprocessorDefinitions + ';$D3D12Define$']
.ProjectX64D3D12Release    = [ Using( .ProjectX64Release ) .Config  = 'D3D12-Release' .PreprocessorDefinitions + ';$D3D12Define$']
#endif
.ProjectX64VulkanDebug     = [ Using( .ProjectX64Debug )   .Config  = 'Vulkan-Debug'  .PreprocessorDefinitions + ';$VulkanDefine$']
.ProjectX64VulkanProfile   = [ Using( .ProjectX64Profile ) .Config  = 'Vulkan-Profile'  .PreprocessorDefinitions + ';$VulkanDefine$']
.ProjectX64VulkanRelease   = [ Using( .ProjectX64Release ) .Config  = 'Vulkan-Release'  .PreprocessorDefinitions + ';$VulkanDefine$']
.ProjectX64NullDebug       = [ Using( .ProjectX64Debug )   .Config  = 'Null-Debug'    .PreprocessorDefinitions + ';$NullDefine$']
.ProjectX64NullProfile     = [ Using( .ProjectX64Profile ) .Config  = 'Null-Profile'  .PreprocessorDefinitions + ';$NullDefine$']
.ProjectX64NullRelease     = [ Using( .ProjectX64Release ) .Config  = 'Null-Release'  .PreprocessorDefinitions + ';$NullDefine$']

.ProjectGfxConfigs = {
  .ProjectX64VulkanDebug, .ProjectX64VulkanProfile, .ProjectX64VulkanRelease,
  .ProjectX64NullDebug,   .ProjectX64NullProfile,   .ProjectX64NullRelease}
#if __WINDOWS__
.ProjectGfxConfigs = {
  .ProjectX64D3D12Debug,  .ProjectX64D3D12Profile,  .ProjectX64D3D12Release,
  .ProjectX64VulkanDebug, .ProjectX64VulkanProfile, .ProjectX64VulkanRelease,
  .ProjectX64NullDebug,   .ProjectX64NullProfile,   .ProjectX64NullRelease}
#endif

VCXProject( 'All-proj' )
{
  .ProjectOutput    = '.\fbuild_all.vcxproj'
  .ProjectFiles     = { '.\fbuild.bff', '.\base.bff', '.\externals\externals.bff', '.\config.bff' }
  .ProjectBasePath  = '.\'
}

// helper definitions
.Configs              = { .X64DebugConfig, .X64ProfileConfig, .X64ReleaseConfig ,
                          .X64LinuxDebugConfig, .X64LinuxProfileConfig, .X64LinuxReleaseConfig }
.Configs_Windows_MSVC = { .X64DebugConfig, .X64ProfileConfig, .X64ReleaseConfig }
.Configs_Linux        = { .X64LinuxDebugConfig, .X64LinuxProfileConfig, .X64LinuxReleaseConfig }

