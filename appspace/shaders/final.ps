#version 140

uniform vec4 info; // (res.x, res.y, time, frametime)
uniform sampler2D tex;

out vec4 out_Color;

float c_0 = 31599.0;
float c_1 = 9362.0;
float c_2 = 29671.0;
float c_3 = 29391.0;
float c_4 = 23497.0;
float c_5 = 31183.0;
float c_6 = 31215.0;
float c_7 = 29257.0;
float c_8 = 31727.0;
float c_9 = 31695.0;

float c_x = 23213.0;
float c_y = 23186.0;
float c_colon = 1040.0;
float c_period = 2.0;
float c_plus  = 1488.0;
float c_minus = 448.0;

//returns 0/1 based on the state of the given bit in the given number
float getBit(float num,float bit)
{
	num = floor(num);
	bit = floor(bit);

	return float(mod(floor(num/pow(2.,bit)),2.) == 1.0);
}

float Sprite3x5(float sprite,vec2 p)
{
	float bounds = float(all(lessThan(p,vec2(3,5))) && all(greaterThanEqual(p,vec2(0,0))));

	return getBit(sprite,(2.0 - p.x) + 3.0 * p.y) * bounds;
}

float Digit(float num,vec2 p)
{
	num = mod(floor(num),10.0);
	if(num == 0.0) return Sprite3x5(c_0,p);
	if(num == 1.0) return Sprite3x5(c_1,p);
	if(num == 2.0) return Sprite3x5(c_2,p);
	if(num == 3.0) return Sprite3x5(c_3,p);
	if(num == 4.0) return Sprite3x5(c_4,p);
	if(num == 5.0) return Sprite3x5(c_5,p);
	if(num == 6.0) return Sprite3x5(c_6,p);
	if(num == 7.0) return Sprite3x5(c_7,p);
	if(num == 8.0) return Sprite3x5(c_8,p);
	if(num == 9.0) return Sprite3x5(c_9,p);
	return 0.0;
}

float debugPrint( float m, vec2 p, vec2 pos ) {
	float c = 0.0;
	vec2 cpos = pos;
	c += Digit(abs(m/100000.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m/10000.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m/1000.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m/100.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m/10.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m),floor(p-cpos));
	cpos.x += 4.;
	c += Sprite3x5(c_period,floor(p-cpos));
	cpos.x += 4.;
	c += Digit(fract(m)*10.0,floor(p-cpos));
	cpos.x += 4.;
	c += Digit(fract(m)*100.0,floor(p-cpos));
	cpos.x += 4.;
	c += Digit(fract(m)*1000.0,floor(p-cpos));
	return c;
}

float debugPrintSmall( float m, vec2 p, vec2 pos ) {
	float c = 0.0;
	vec2 cpos = pos;
	//cpos.x += 4.;
	//c += Digit(abs(m/100.),floor(p-cpos));
	c += Digit(abs(m/10.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m),floor(p-cpos));
	cpos.x += 4.;
	c += Sprite3x5(c_period,floor(p-cpos));
	cpos.x += 4.;
	c += Digit(fract(m)*10.0,floor(p-cpos));
	cpos.x += 4.;
	c += Digit(fract(m)*100.0,floor(p-cpos));
	return c;
}

float debugPrintMed( float m, vec2 p, vec2 pos ) {
	float c = 0.0;
	vec2 cpos = pos;
	c += Digit(abs(m/100.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m/10.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m),floor(p-cpos));
	cpos.x += 4.;
	c += Sprite3x5(c_period,floor(p-cpos));
	cpos.x += 4.;
	c += Digit(fract(m)*10.0,floor(p-cpos));
	//cpos.x += 4.;
	//c += Digit(fract(m)*100.0,floor(p-cpos));
	//cpos.x += 4.;
	//c += Digit(fract(m)*1000.0,floor(p-cpos));
	return c;
}

float debugPrintInt( float m, vec2 p, vec2 pos ) {
	float c = 0.0;
	vec2 cpos = pos;
	c += Digit(abs(m/100000.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m/10000.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m/1000.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m/100.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m/10.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m),floor(p-cpos));
	return c;
}

float debugPrint4dig( float m, vec2 p, vec2 pos ) {
	float c = 0.0;
	vec2 cpos = pos;
	//cpos.x += 4.;
	//c += Digit(abs(m/1000.),floor(p-cpos));
	c += Digit(abs(m/100.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m/10.),floor(p-cpos));
	cpos.x += 4.;
	c += Digit(abs(m),floor(p-cpos));
	return c;
}

// longestSide == size, smaller number == smaller size
// x == amount of chars in x axis. same for y, but y axis.
vec4 getCharBox(float x, float y, float longestSide)
{
	vec2 c = vec2(4,6);
	vec2 px = vec2(c.x*x, c.y*y);
	vec2 box = vec2(0);
	vec2 multi = vec2(20.0);
	if (x > y)
	{
		box = vec2(longestSide, px.y/px.x*longestSide);
		multi = gl_FragCoord.xy * 1.0/(info.x/(px.x*(info.x/longestSide)));
	} else
	{
		box = vec2(px.x/px.y*longestSide, longestSide);
		multi = gl_FragCoord.xy * 1.0/(info.y/(px.y*(info.y/longestSide)));
	}
	return vec4(box, multi);
}

void main( void ) {
	vec2 po = ( gl_FragCoord.xy / info.xy );

	vec4 thingy = getCharBox(5,2,40);
	vec2 dynBox = thingy.xy/info.xy;
	vec2 p = thingy.zw;

	if (po.x > dynBox.x || po.y > dynBox.y)
	{
		vec2 tsize = textureSize(tex, 0);
		ivec2 abscoord = ivec2(int(po.x * tsize.x),int(po.y* tsize.y) );
		out_Color = texelFetchOffset(tex, abscoord, 0, ivec2(0,0));
		//out_Color = texture(tex, po);
		//out_Color = pow(out_Color, 1/2.2);
		return;
	}
	float c = 0.0;
	vec2 pos = vec2(0,0);
	c += debugPrintSmall( info.z, p, pos );
	pos.y += 6.0;
	c += debugPrint4dig( 1000.0/info.z, p, pos );
	pos.y += 6.0;
	/*
	if (info.w < 100.0)
		c += debugPrintSmall( info.w, p , pos);
	else
		c += debugPrintMed( info.w, p , pos);
	*/

	
	out_Color = vec4( vec3( c )-vec3(0.3,0.5,0.3), 1.0 );
}
