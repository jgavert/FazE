#version 140

uniform vec4 info; // (res.x, res.y, time, frametime)
uniform vec4 box;
uniform sampler2D tex1;

out vec4 out_Color;


vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);
    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 fromRGB(vec3 data)
{
  return vec3(data.x/255.0, data.y/255.0, data.z/255.0);
}

vec3 toRGB(vec3 data)
{
  return vec3(data.x*255.0,data.y*255.0,data.z*255.0);
}

void preprocess(vec2 b1, vec2 b2, vec2 po)
{
	if (b1.x > po.x  && b1.y > po.y)
	{
		if (b2.x < po.x  && b2.y < po.y)
		{
			out_Color += vec4(0.2);
		}
	}
}

void main( void ) {
	vec2 po = ( gl_FragCoord.xy / info.xy );

	vec2 b1 = box.xy/info.xy;
    vec2 b2 = box.zw/info.xy;
	vec2 tsize = textureSize(tex1, 0);
	ivec2 abscoord = ivec2(int(po.x * tsize.x),int(po.y* tsize.y) );
	out_Color = vec4(hsv2rgb(texelFetchOffset(tex1, abscoord, 0, ivec2(0,0)).xyz), 1.0);
	//out_Color = texture(tex1, po);
	preprocess(b1, b2, po);
}
